programmers = [
    {"value": "arduino", "text": gettext("Arduino programmer")},
    {"value": "avr910", "text": gettext("AVR910")},
    {"value": "avrftdi", "text": gettext("Interface to the MPSSE Engine of FTDI Chips using libftdi.")},
    {"value": "buspirate", "text": gettext("Using the Bus Pirate’s SPI interface for programming")},
    {"value": "buspirate_bb", "text": gettext("Using the Bus Pirate’s bitbang interface for programming")},
    {"value": "butterfly", "text": gettext("Atmel Butterfly evaluation board; Atmel AppNotes AVR109, AVR911")},
    {"value": "butterfly_mk", "text": gettext("Mikrokopter.de Butterfly")},
    {"value": "dragon_dw", "text": gettext("Atmel AVR Dragon in debugWire mode")},
    {"value": "dragon_hvsp", "text": gettext("Atmel AVR Dragon in HVSP mode")},
    {"value": "dragon_isp", "text": gettext("Atmel AVR Dragon in ISP mode")},
    {"value": "dragon_jtag", "text": gettext("Atmel AVR Dragon in JTAG mode")},
    {"value": "dragon_pdi", "text": gettext("Atmel AVR Dragon in PDI mode")},
    {"value": "dragon_pp", "text": gettext("Atmel AVR Dragon in PP mode")},
    {"value": "ftdi_syncbb", "text": gettext("FT245R/FT232R Synchronous BitBangMode Programmer")},
    {"value": "jtagmki", "text": gettext("Atmel JTAG ICE mkI")},
    {"value": "jtagmkii", "text": gettext("Atmel JTAG ICE mkII")},
    {"value": "jtagmkii_avr32", "text": gettext("Atmel JTAG ICE mkII in AVR32 mode")},
    {"value": "jtagmkii_dw", "text": gettext("Atmel JTAG ICE mkII in debugWire mode")},
    {"value": "jtagmkii_isp", "text": gettext("Atmel JTAG ICE mkII in ISP mode")},
    {"value": "jtagmkii_pdi", "text": gettext("Atmel JTAG ICE mkII in PDI mode")},
    {"value": "jtagice3", "text": gettext("Atmel JTAGICE3")},
    {"value": "jtagice3_pdi", "text": gettext("Atmel JTAGICE3 in PDI mode")},
    {"value": "jtagice3_dw", "text": gettext( "Atmel JTAGICE3 in debugWire mode")},
    {"value": "jtagice3_isp", "text": gettext("Atmel JTAGICE3 in ISP mode")},
    {"value": "par", "text": gettext("Parallel port bitbanging")},
    {"value": "pickit2", "text": gettext("Microchip’s PICkit2 Programmer")},
    {"value": "serbb", "text": gettext("Serial port bitbanging")},
    {"value": "stk500", "text": gettext("Atmel STK500 Version 1.x firmware")},
    {"value": "stk500generic", "text": gettext("Atmel STK500, autodetect firmware version")},
    {"value": "stk500v2", "text": gettext("Atmel STK500 Version 2.x firmware")},
    {"value": "stk500hvsp", "text": gettext("Atmel STK500 V2 in high-voltage serial programming mode")},
    {"value": "stk500pp", "text": gettext("Atmel STK500 V2 in parallel programming mode")},
    {"value": "stk600", "text": gettext("Atmel STK600")},
    {"value": "stk600hvsp", "text": gettext("Atmel STK600 in high-voltage serial programming mode")},
    {"value": "stk600pp", "text": gettext("Atmel STK600 in parallel programming mode")},
    {"value":  "usbasp", "text": gettext("USBasp programmer, see http,//www.fischl.de/usbasp/")},
    {"value": "usbtiny", "text": gettext("Driver for usbtiny-type programmers")},
    {"value": "wiring", "text": gettext("http,//wiring.org.co/, Basically STK500v2 protocol, with some glue to trigger the bootloader")}
];


boards = [
    {"value": "usb1286", "text": gettext("AT90USB1286 Teensy++ ")},
    {"value": "m1280", "text": gettext("ATmega1280 Arduino Mega")},
    {"value": "m2560", "text": gettext("ATmega2560 Leapfrog, Ultimaker, RAMPS 1.3")},
    {"value": "m644 ", "text": gettext("ATmega644 SanguinoA")},
    {"value": "m644p", "text": gettext("ATmega644P Sanguino")},
    {"value": "m1284p", "text": gettext("ATmega1284P Sanguino")},
    {"value": "m328p", "text": gettext("ATmega328P DUEMILANOVE")},
    {"value": "usb646", "text": gettext("AT90USB646 Brainwave")}
];